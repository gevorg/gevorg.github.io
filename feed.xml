<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.2">Jekyll</generator><link href="http://gevorg.me/feed.xml" rel="self" type="application/atom+xml" /><link href="http://gevorg.me/" rel="alternate" type="text/html" /><updated>2016-07-04T09:48:47+00:00</updated><id>http://gevorg.me/</id><title>Blog about many things</title><entry><title>Things that I like about my OnePlus2</title><link href="http://gevorg.me/Things-that-I-like-about-my-OnePlus2/" rel="alternate" type="text/html" title="Things that I like about my OnePlus2" /><published>2016-06-19T00:00:00+00:00</published><updated>2016-06-19T00:00:00+00:00</updated><id>http://gevorg.me/Things that I like about my OnePlus2</id><content type="html" xml:base="http://gevorg.me/Things-that-I-like-about-my-OnePlus2/">&lt;p&gt;As I &lt;a href=&quot;http://gevorg.me/Things-that-I-don&#39;t-like-about-my-OnePlus2/&quot;&gt;complained&lt;/a&gt; about my &lt;a href=&quot;https://oneplus.net/2&quot;&gt;OnePlus2&lt;/a&gt; few weeks ago, I think
it would be fair to write few good things about it. I decided to write
about it, because I finally got proper OS update and as you may 
notice from title, update fixed many problems that I had before.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;it-hanged-every-time-i-needed-it-very-badly&quot;&gt;It hanged every time I needed it very badly&lt;/h2&gt;
&lt;p&gt;I guess it is because of 6th version of Android, but now it is awesome.
After update I never had a problem like frozen screen or hanging OS.&lt;/p&gt;

&lt;p&gt;It would be fair to say that problem might also be related to 5th version
of Android that it was using before. In my opinion 5th version was really 
unstable and had lot of bugs, that were mostly fixed in 6th version.&lt;/p&gt;

&lt;h2 id=&quot;fingerprint-sensor-now-works&quot;&gt;Fingerprint sensor, now works&lt;/h2&gt;
&lt;p&gt;It works now and I have to enter pin only in rare cases. 
So I am finally happy :)&lt;/p&gt;

&lt;h2 id=&quot;software-update-came&quot;&gt;Software update came&lt;/h2&gt;
&lt;p&gt;It finally updated to 6th version and did it in a proper way. Update 
fixed the most of problems that I had before.&lt;/p&gt;

&lt;h2 id=&quot;do-i-consider-oneplus3&quot;&gt;Do I consider &lt;a href=&quot;https://oneplus.net/3&quot;&gt;OnePlus3&lt;/a&gt;?&lt;/h2&gt;
&lt;p&gt;Sure, I think it makes sense to consider the next generation of &lt;a href=&quot;https://oneplus.net/2&quot;&gt;OnePlus2&lt;/a&gt;
and hopefully it will not have hidden problems as &lt;a href=&quot;https://oneplus.net/2&quot;&gt;OnePlus2&lt;/a&gt; had in the beginning.&lt;/p&gt;

&lt;h2 id=&quot;related-links&quot;&gt;Related links&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://oneplus.net/2&quot;&gt;OnePlus2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://oneplus.net/3&quot;&gt;OnePlus3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="android" /><summary>As I complained about my OnePlus2 few weeks ago, I think
it would be fair to write few good things about it. I decided to write
about it, because I finally got proper OS update and as you may 
notice from title, update fixed many problems that I had before.</summary></entry><entry><title>Getting started with Koa v2</title><link href="http://gevorg.me/Getting-started-with-Koa-v2/" rel="alternate" type="text/html" title="Getting started with Koa v2" /><published>2016-06-03T00:00:00+00:00</published><updated>2016-06-03T00:00:00+00:00</updated><id>http://gevorg.me/Getting started with Koa v2</id><content type="html" xml:base="http://gevorg.me/Getting-started-with-Koa-v2/">&lt;p&gt;I just started using &lt;a href=&quot;http://koajs.com&quot;&gt;Koa - next generation web framework for node.js&lt;/a&gt; 
and want to share few good things about it.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;hello-world&quot;&gt;Hello World!&lt;/h2&gt;

&lt;p&gt;Basic server written using &lt;a href=&quot;http://koajs.com&quot;&gt;koa&lt;/a&gt; framework looks like this&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import Koa from &#39;koa&#39;;
const app = new Koa();

// Setup handler.
app.use(async ctx =&amp;gt; {
    ctx.body = &quot;Hello World!&quot;;
});

// Start server.
app.listen(3000);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You might notice sample uses &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; and obviously those are 
not yet supported in current version of Node.js.&lt;/p&gt;

&lt;p&gt;Plan is to have full support of &lt;a href=&quot;https://babeljs.io/docs/learn-es2015/&quot;&gt;next generation javascript&lt;/a&gt; 
in future Node.js releases and for now modules like &lt;a href=&quot;http://babeljs.io/&quot;&gt;babel&lt;/a&gt; help us.&lt;/p&gt;

&lt;h2 id=&quot;babel-sample&quot;&gt;Babel sample&lt;/h2&gt;

&lt;p&gt;To run sample first we need to install &lt;a href=&quot;http://babeljs.io/&quot;&gt;babel&lt;/a&gt; compiler&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm install babel-core --save
$ npm install babel-preset-es2015-node5 --save
$ npm install babel-preset-stage-3 --save
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we need to create start script for it&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// set babel in entry file
require(&#39;babel-core/register&#39;)({
    presets: [&#39;es2015-node5&#39;, &#39;stage-3&#39;]
});

require(&#39;./app&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After we need to include all &lt;a href=&quot;https://babeljs.io/docs/learn-es2015/&quot;&gt;next gen js&lt;/a&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; file and run
&lt;code class=&quot;highlighter-rouge&quot;&gt;node index.js&lt;/code&gt; to start server.&lt;/p&gt;

&lt;h2 id=&quot;future-steps&quot;&gt;Future steps&lt;/h2&gt;

&lt;p&gt;Just after Node.js will add support for &lt;a href=&quot;https://babeljs.io/docs/learn-es2015/&quot;&gt;next gen js&lt;/a&gt;, the only thing 
that will be required is to remove &lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; file and everything else
should work like a pie :)&lt;/p&gt;

&lt;h2 id=&quot;related-links&quot;&gt;Related links&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://koajs.com&quot;&gt;Koa - next generation web framework for node.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://babeljs.io/&quot;&gt;Use next generation JavaScript, today&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://babeljs.io/docs/learn-es2015/&quot;&gt;Learn ES2015&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="javascript" /><category term="node.js" /><category term="koa" /><category term="es2015" /><summary>I just started using Koa - next generation web framework for node.js 
and want to share few good things about it.</summary></entry><entry><title>Template literals in javascript</title><link href="http://gevorg.me/Template-literals-in-javascript/" rel="alternate" type="text/html" title="Template literals in javascript" /><published>2016-05-22T00:00:00+00:00</published><updated>2016-05-22T00:00:00+00:00</updated><id>http://gevorg.me/Template literals in javascript</id><content type="html" xml:base="http://gevorg.me/Template-literals-in-javascript/">&lt;p&gt;I want to write about another new thing that I found in javascript.
Those are called &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals&quot;&gt;Template literals&lt;/a&gt; and look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;`string text`

`string text line 1
 string text line 2`

`string text ${expression} string text`

tag `string text ${expression} string text`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s see where we can use them.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;syntax&quot;&gt;Syntax&lt;/h2&gt;

&lt;p&gt;From sample above you case see that &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals&quot;&gt;Template literals&lt;/a&gt; look like regular
strings, but with some extra features and instead of double quotes you
need to use back-ticks to declare them.&lt;/p&gt;

&lt;p&gt;As a bonus you can define multi-line strings and embed any valid
 javascript expression in it. Let’s see few usages below.&lt;/p&gt;

&lt;h2 id=&quot;usages&quot;&gt;Usages&lt;/h2&gt;

&lt;p&gt;Basic sample below uses template literal to pass name:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Simple string substitution
var name = &quot;Gevorg&quot;;
console.log(`Yo, ${name}!`);

// =&amp;gt; &quot;Yo, Gevorg!&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you can embed function calls:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function fn() { return &quot;I am a result. Rarr&quot;; }
console.log(`foo ${fn()} bar`);

//=&amp;gt; foo I am a result. Rarr bar.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or just any valid javascript expression:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var user = {name: &#39;Caitlin Potter&#39;};
console.log(`Thanks for getting this into V8, ${user.name.toUpperCase()}.`);

// =&amp;gt; &quot;Thanks for getting this into V8, CAITLIN POTTER&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;tagged-templates&quot;&gt;Tagged Templates&lt;/h2&gt;

&lt;p&gt;You can modify templates by placing function calls in front of them:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var a = 5;
var b = 10;

function tag(strings, ...values) {
  console.log(strings[0]); // &quot;Hello &quot;
  console.log(strings[1]); // &quot; world &quot;
  console.log(strings[2]); // &quot;&quot;
  console.log(values[0]);  // 15
  console.log(values[1]);  // 50

  return &quot;Boom-boom chacka-chaka!&quot;;
}

tag`Hello ${ a + b } world ${ a * b }`;
// =&amp;gt; &quot;Boom-boom chacka-chaka!&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;related-links&quot;&gt;Related links&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals&quot;&gt;Template literals&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/updates/2015/01/ES6-Template-Strings&quot;&gt;Getting Literal With ES6 Template Strings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="javascript" /><category term="es2015" /><summary>I want to write about another new thing that I found in javascript.
Those are called Template literals and look like this:

`string text`

`string text line 1
 string text line 2`

`string text ${expression} string text`

tag `string text ${expression} string text`


Let’s see where we can use them.</summary></entry><entry><title>Javascript generator functions</title><link href="http://gevorg.me/Javascript-generator-functions/" rel="alternate" type="text/html" title="Javascript generator functions" /><published>2016-05-16T00:00:00+00:00</published><updated>2016-05-16T00:00:00+00:00</updated><id>http://gevorg.me/Javascript generator functions</id><content type="html" xml:base="http://gevorg.me/Javascript-generator-functions/">&lt;p&gt;I just discovered for myself relatively new thing and that is generator function in javascript.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function* name([param[, param[, ... param]]]) {
   // statements
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this post I will share few nice usages and many good things about them.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;simple-sample&quot;&gt;Simple sample&lt;/h2&gt;

&lt;p&gt;There are few things that you must know about generator functions&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;These are functions that you can pause and resume&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;function*&lt;/code&gt; is used to declare one&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; is used to pause execution&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;next()&lt;/code&gt; function is used to resume execution&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function* idMaker(){
  var index = 0;
  while(index &amp;lt; 3)
    yield index++;
}

var gen = idMaker();

console.log(gen.next().value); // 0
console.log(gen.next().value); // 1
console.log(gen.next().value); // 2
console.log(gen.next().value); // undefined&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In sample above &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; is used to pause execution and return current value of &lt;code class=&quot;highlighter-rouge&quot;&gt;index&lt;/code&gt;.
Return value format for &lt;code class=&quot;highlighter-rouge&quot;&gt;next()&lt;/code&gt; is following&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{ value: &#39;some value passed using yield&#39;, done: [true | false] }&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;sample-with-input&quot;&gt;Sample with input&lt;/h2&gt;

&lt;p&gt;You can pass data to current execution step using &lt;code class=&quot;highlighter-rouge&quot;&gt;next()&lt;/code&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function *foo(x) {
   var y = 2 * (yield (x + 1));
   var z = yield (y / 3);
   return (x + y + z);
}

var it = foo( 5 );

// note: not sending anything into `next()` here
console.log( it.next() );       // { value:6, done:false }
console.log( it.next( 12 ) );   // { value:8, done:false }
console.log( it.next( 13 ) );   // { value:42, done:true }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;jumping-from-one-generator-to-another&quot;&gt;Jumping from one generator to another&lt;/h2&gt;

&lt;p&gt;You can jump from one generator to another using &lt;code class=&quot;highlighter-rouge&quot;&gt;yield*&lt;/code&gt; inside generator&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function* anotherGenerator(i) {
  yield i + 1;
  yield i + 2;
  yield i + 3;
}

function* generator(i){
  yield i;
  yield* anotherGenerator(i);
  yield i + 10;
}

var gen = generator(10);

console.log(gen.next().value); // 10
console.log(gen.next().value); // 11
console.log(gen.next().value); // 12
console.log(gen.next().value); // 13
console.log(gen.next().value); // 20
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;why-should-you-use-generator-functions&quot;&gt;Why should you use generator functions?&lt;/h2&gt;

&lt;p&gt;Every developer familiar with async model that &lt;a href=&quot;https://nodejs.org/&quot;&gt;node.js&lt;/a&gt; uses, knows that async
code becomes long list of nested callback functions. Let’s look following sample&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;...
login(username, password, function(user) {
    loadPosts(user.id, function(posts) {
        ...
    });
});
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;using generator functions you can transform your nested callback functions into nice/readable statements&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;...
var user = yield login(username, password);
var posts = yield loadPosts(user.id);
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can check &lt;a href=&quot;https://github.com/tj/co&quot;&gt;co&lt;/a&gt; module for more information.&lt;/p&gt;

&lt;h2 id=&quot;related-links&quot;&gt;Related links&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*&quot;&gt;function* - MDN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://davidwalsh.name/es6-generators&quot;&gt;ES6 Generators&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tj/co&quot;&gt;The ultimate generator based flow-control goodness&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="javascript" /><category term="node.js" /><summary>I just discovered for myself relatively new thing and that is generator function in javascript.

function* name([param[, param[, ... param]]]) {
   // statements
}

In this post I will share few nice usages and many good things about them.</summary></entry><entry><title>Python is a great programming language</title><link href="http://gevorg.me/Python-is-a-great-programming-language/" rel="alternate" type="text/html" title="Python is a great programming language" /><published>2016-05-08T00:00:00+00:00</published><updated>2016-05-08T00:00:00+00:00</updated><id>http://gevorg.me/Python is a great programming language</id><content type="html" xml:base="http://gevorg.me/Python-is-a-great-programming-language/">&lt;p&gt;Recently I started learning &lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt; programming language and loved it a lot.&lt;/p&gt;

&lt;p&gt;It is very rich, it is based on principles that I adore and if you know the right way of doing things, you can write
great piece of software just with a few lines of code.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;zen-of-python&quot;&gt;Zen of Python&lt;/h2&gt;
&lt;p&gt;I will start from guiding principles for &lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt; design, which one should always keep in mind.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Beautiful is better than ugly.&lt;/li&gt;
  &lt;li&gt;Explicit is better than implicit.&lt;/li&gt;
  &lt;li&gt;Simple is better than complex.&lt;/li&gt;
  &lt;li&gt;Complex is better than complicated.&lt;/li&gt;
  &lt;li&gt;Flat is better than nested.&lt;/li&gt;
  &lt;li&gt;Sparse is better than dense.&lt;/li&gt;
  &lt;li&gt;Readability counts.&lt;/li&gt;
  &lt;li&gt;Special cases aren’t special enough to break the rules.&lt;/li&gt;
  &lt;li&gt;Although practicality beats purity.&lt;/li&gt;
  &lt;li&gt;Errors should never pass silently.&lt;/li&gt;
  &lt;li&gt;Unless explicitly silenced.&lt;/li&gt;
  &lt;li&gt;In the face of ambiguity, refuse the temptation to guess.&lt;/li&gt;
  &lt;li&gt;There should be one– and preferably only one –obvious way to do it.&lt;/li&gt;
  &lt;li&gt;Although that way may not be obvious at first unless you’re Dutch.&lt;/li&gt;
  &lt;li&gt;Now is better than never.&lt;/li&gt;
  &lt;li&gt;Although never is often better than &lt;em&gt;right&lt;/em&gt; now.&lt;/li&gt;
  &lt;li&gt;If the implementation is hard to explain, it’s a bad idea.&lt;/li&gt;
  &lt;li&gt;If the implementation is easy to explain, it may be a good idea.&lt;/li&gt;
  &lt;li&gt;Namespaces are one honking great idea – let’s do more of those!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These principles are known as &lt;a href=&quot;https://www.python.org/dev/peps/pep-0020/&quot;&gt;PEP 20&lt;/a&gt; or &lt;strong&gt;The Zen of Python&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;many-ways-of-doing-things&quot;&gt;Many ways of doing things&lt;/h2&gt;

&lt;p&gt;What is great about &lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt; is that you can implement same functionality in many ways and depending which path you
choose it describes your maturity level.&lt;/p&gt;

&lt;p&gt;Let’s consider simple task &lt;strong&gt;create a concatenated string from 0 to 19&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bad solution&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# create a concatenated string from 0 to 19 (e.g. &quot;012..1819&quot;)
nums = &quot;&quot;
for n in range(20):
  nums += str(n)   # slow and inefficient
print nums
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Good solution&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# create a concatenated string from 0 to 19 (e.g. &quot;012..1819&quot;)
nums = []
for n in range(20):
  nums.append(str(n))
print &quot;&quot;.join(nums)  # much more efficient
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Best solution&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;# create a concatenated string from 0 to 19 (e.g. &quot;012..1819&quot;)
nums = [str(n) for n in range(20)]
print &quot;&quot;.join(nums)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;final-conclusion&quot;&gt;Final conclusion&lt;/h2&gt;
&lt;p&gt;I would definitely suggest &lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt; to any programmer, because in good hands it becomes great tool for magic.&lt;/p&gt;

&lt;p&gt;One should certainly consider following guide &lt;a href=&quot;http://docs.python-guide.org/en/latest/&quot;&gt;The Hitchhiker’s Guide to Python!&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;related-links&quot;&gt;Related links&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.python-guide.org/en/latest/&quot;&gt;The Hitchhiker’s Guide to Python!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-0020/&quot;&gt;PEP 20&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="python" /><summary>Recently I started learning Python programming language and loved it a lot.

It is very rich, it is based on principles that I adore and if you know the right way of doing things, you can write
great piece of software just with a few lines of code.</summary></entry><entry><title>Things that I don’t like about my OnePlus2</title><link href="http://gevorg.me/Things-that-I-don't-like-about-my-OnePlus2/" rel="alternate" type="text/html" title="Things that I don&#39;t like about my OnePlus2" /><published>2016-05-07T00:00:00+00:00</published><updated>2016-05-07T00:00:00+00:00</updated><id>http://gevorg.me/Things that I don&#39;t like about my OnePlus2</id><content type="html" xml:base="http://gevorg.me/Things-that-I-don&#39;t-like-about-my-OnePlus2/">&lt;p&gt;Few months ago I bought my &lt;a href=&quot;https://oneplus.net/2&quot;&gt;OnePlus2&lt;/a&gt; after reading many articles about how good this phone is and how low &lt;strong&gt;$349&lt;/strong&gt;
is for &lt;em&gt;‘Flagship Killer’&lt;/em&gt; as they call it.&lt;/p&gt;

&lt;p&gt;My previous phone was Nexus 5 and I was very happy with quality that I got, unfortunately I can’t say same about &lt;a href=&quot;https://oneplus.net/2&quot;&gt;OnePlus2&lt;/a&gt;.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;it-hangs-every-time-i-need-it-very-badly&quot;&gt;It hangs every time I need it very badly&lt;/h2&gt;
&lt;p&gt;I was aware about modified software that &lt;a href=&quot;https://oneplus.net/2&quot;&gt;OnePlus2&lt;/a&gt; comes with, they claim that tuned software that comes with it saves
battery life a lot.&lt;/p&gt;

&lt;p&gt;Maybe it is true, however after not using phone for a while it takes few seconds to start up. During that period my
phone is frozen and I can hardly do anything.&lt;/p&gt;

&lt;p&gt;It really sucks, specially for important calls or if I want to check something quickly.&lt;/p&gt;

&lt;h2 id=&quot;fingerprint-sensor&quot;&gt;Fingerprint sensor&lt;/h2&gt;
&lt;p&gt;At first fingerprint sensor was really cool feature that I was playing all day long, but it turned out to be really
big headache after using it for months.&lt;/p&gt;

&lt;p&gt;It does not work properly in 80% of cases and I need to enter pin manually.&lt;/p&gt;

&lt;h2 id=&quot;software-update-did-not-came&quot;&gt;Software update did not came&lt;/h2&gt;
&lt;p&gt;I expected to have Android M on it during Q1 of 2016, because that is what they promised. However it turned out that on
Q1 they just published beta version with manual upgrade guide.&lt;/p&gt;

&lt;p&gt;That really sucks, because I love to have proper system upgrades instead of rooting phone and installing beta version on
it.&lt;/p&gt;

&lt;h2 id=&quot;what-i-would-do-if-i-had-another-chance&quot;&gt;What I would do if I had another chance?&lt;/h2&gt;
&lt;p&gt;If I could turn back time, for sure I would not buy &lt;a href=&quot;https://oneplus.net/2&quot;&gt;OnePlus2&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Instead I would wait a little and get &lt;a href=&quot;http://consumer.huawei.com/minisite/worldwide/nexus6p/&quot;&gt;Nexus6P&lt;/a&gt; with &lt;strong&gt;$499.00&lt;/strong&gt; price, but way better quality.&lt;/p&gt;

&lt;h2 id=&quot;related-links&quot;&gt;Related links&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://oneplus.net/2&quot;&gt;OnePlus2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://consumer.huawei.com/minisite/worldwide/nexus6p/&quot;&gt;Nexus6P&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="android" /><summary>Few months ago I bought my OnePlus2 after reading many articles about how good this phone is and how low $349
is for ‘Flagship Killer’ as they call it.

My previous phone was Nexus 5 and I was very happy with quality that I got, unfortunately I can’t say same about OnePlus2.</summary></entry><entry><title>How I fought crossword addiction</title><link href="http://gevorg.me/How-I-fought-crossword-addiction/" rel="alternate" type="text/html" title="How I fought crossword addiction" /><published>2016-05-06T00:00:00+00:00</published><updated>2016-05-06T00:00:00+00:00</updated><id>http://gevorg.me/How I fought crossword addiction</id><content type="html" xml:base="http://gevorg.me/How-I-fought-crossword-addiction/">&lt;p&gt;It might sound funny, but I had an addiction to crossword solving few years ago. It started just from few
&lt;a href=&quot;http://scanword.ru&quot;&gt;scanword.ru&lt;/a&gt; contests and became a habit that was taking hours from me every day.&lt;/p&gt;

&lt;p&gt;As a true developer who was familiar with java technologies I decided to fight that habit using my skills.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;program-for-solving-crosswords&quot;&gt;Program for solving crosswords&lt;/h2&gt;

&lt;p&gt;Yes, I created program that started solving crosswords for me and you know what? It started solving crosswords faster
than I ever did. I called it &lt;a href=&quot;http://gevorg.me/flatback/&quot;&gt;flatback&lt;/a&gt; and published all sources on GitHub.&lt;/p&gt;

&lt;h2 id=&quot;demo&quot;&gt;Demo&lt;/h2&gt;

&lt;p&gt;Below is program demo:&lt;/p&gt;

&lt;div class=&quot;hs-responsive-embed-youtube wrap&quot;&gt;
    &lt;iframe width=&quot;768&quot; height=&quot;432&quot; src=&quot;http://www.youtube.com/embed/fYGc2_UPTKQ?vq=hd720&amp;amp;rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&quot;related-links&quot;&gt;Related links&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://gevorg.me/flatback/&quot;&gt;flatback - crossword solver&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://scanword.ru&quot;&gt;Scanword - crossword website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="java" /><category term="selenium" /><summary>It might sound funny, but I had an addiction to crossword solving few years ago. It started just from few
scanword.ru contests and became a habit that was taking hours from me every day.

As a true developer who was familiar with java technologies I decided to fight that habit using my skills.</summary></entry><entry><title>Writing modules with poor javascript</title><link href="http://gevorg.me/Writing-modules-with-poor-javascript/" rel="alternate" type="text/html" title="Writing modules with poor javascript" /><published>2016-05-05T00:00:00+00:00</published><updated>2016-05-05T00:00:00+00:00</updated><id>http://gevorg.me/Writing modules with poor javascript</id><content type="html" xml:base="http://gevorg.me/Writing-modules-with-poor-javascript/">&lt;p&gt;Recently I was working on javascript project called &lt;a href=&quot;http://foofiles.com&quot;&gt;FooFiles&lt;/a&gt; and want to write about pattern
that I used there.&lt;/p&gt;

&lt;p&gt;I will explain pattern and write a bit about positive and negative things that I found.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-i-needed&quot;&gt;What I needed?&lt;/h2&gt;

&lt;p&gt;I needed modular pattern to use it in my application and certainly there are many libraries or
external tools that I can use to achieve that.&lt;/p&gt;

&lt;p&gt;Good option could be to use &lt;a href=&quot;http://coffeescript.org/&quot;&gt;CoffeeScript&lt;/a&gt; or &lt;a href=&quot;http://requirejs.org/&quot;&gt;require.js&lt;/a&gt; that are
perfectly doing that.&lt;/p&gt;

&lt;p&gt;However I had specific rule for my project to have no external dependencies for core part of it, so it runs fast and
smooth.&lt;/p&gt;

&lt;h2 id=&quot;my-pattern&quot;&gt;My pattern&lt;/h2&gt;

&lt;p&gt;Below is what I decided to use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// New FooFiles unit.
ff.newUnit = (function(dependency1, dependency2, undefined) {
    &#39;use strict&#39;;

    // Private data/functions go here.
    var privateString = &quot;Very Private&quot;;
    function privateFunc(param1, param2) {
        ...
    }
    ...

    // Public data/functions go here.
    var self = {
        publicString: &quot;Hello Unit!&quot;,
        publicFunc: function (param1) {
            ...
        }
        ...
    };

    // Return unit instance.
    return self;
})(dependency1, dependency2);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;good-things&quot;&gt;Good things&lt;/h2&gt;

&lt;p&gt;Good things about this pattern are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To expose things you just need to wire them to &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; object or they will remain private&lt;/li&gt;
  &lt;li&gt;Usage parameters are listed as input parameters for anonymous function call, so you must define input for each &lt;code class=&quot;highlighter-rouge&quot;&gt;module&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;If someone will change &lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt; in external scope that will not affect your module, because it has its own version inside.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bad-things&quot;&gt;Bad things&lt;/h2&gt;

&lt;p&gt;I had problems with this pattern in case of module interdependency.
Instead of managing load cycles I decided to use &lt;a href=&quot;https://en.wikipedia.org/wiki/Observer_pattern&quot;&gt;observer pattern&lt;/a&gt; to
detach modules that are interdependent.&lt;/p&gt;

&lt;p&gt;So if &lt;code class=&quot;highlighter-rouge&quot;&gt;module1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;module2&lt;/code&gt; were interdependent, I removed one side dependency and replaced it with following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// From module1
on(&#39;EVENT_FROM_MODULE&#39;, function(data) {
...
});

...
// From module2
fire(&#39;EVENT_FROM_MODULE&#39;, {data: &#39;some important data&#39;});
...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;related-links&quot;&gt;Related links&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gevorg/foofiles&quot;&gt;FooFiles is your very own personal file space on web&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Observer_pattern&quot;&gt;Observer pattern&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Immediately-invoked_function_expression&quot;&gt;Immediately-invoked function expression&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="javascript" /><summary>Recently I was working on javascript project called FooFiles and want to write about pattern
that I used there.

I will explain pattern and write a bit about positive and negative things that I found.</summary></entry><entry><title>Why I love using GitHub Pages with Jekyll?</title><link href="http://gevorg.me/Why-I-love-using-GitHub-Pages-with-Jekyll/" rel="alternate" type="text/html" title="Why I love using GitHub Pages with Jekyll?" /><published>2016-05-04T00:00:00+00:00</published><updated>2016-05-04T00:00:00+00:00</updated><id>http://gevorg.me/Why I love using GitHub Pages with Jekyll</id><content type="html" xml:base="http://gevorg.me/Why-I-love-using-GitHub-Pages-with-Jekyll/">&lt;p&gt;After using &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; for my websites I have some things to share with you.&lt;/p&gt;

&lt;p&gt;There are many good things that I loved about it, starting from simple fact that it is completely free to use and
ending with more advanced feature like custom urls.&lt;/p&gt;

&lt;p&gt;But also there are few things that I did not like about it and those are mostly cases when I met platform limitations.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-is-it&quot;&gt;What is it?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; is free hosting solution wired with your GitHub repositories. So you
need to create GitHub repository, configure few settings and it becomes website hosted on Github.&lt;/p&gt;

&lt;h2 id=&quot;possible-usages&quot;&gt;Possible usages&lt;/h2&gt;
&lt;p&gt;You can use it in many ways, but I think the main usages are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Personal website / blog&lt;/li&gt;
  &lt;li&gt;Project website for presentation / documentation / tutorials / demo&lt;/li&gt;
  &lt;li&gt;anything that works on javascript / css / html and sure Jekyll is plus&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;just-create-repository-with-your-username&quot;&gt;Just create repository with your username:&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git clone https://github.com/username/username.github.io
$ cd username.github.io
$ echo &quot;Hello World&quot; &amp;gt; index.html
$ git commit -am &quot;Initial commit&quot;
$ git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you are done, simple website will be available via &lt;strong&gt;username.github.io&lt;/strong&gt; url.&lt;/p&gt;

&lt;h2 id=&quot;or-create-branch-gh-pages-for-existing-project&quot;&gt;Or create branch gh-pages for existing project:&lt;/h2&gt;

&lt;p&gt;And your website will be available via &lt;strong&gt;http://username.github.io/repository&lt;/strong&gt; url.&lt;/p&gt;

&lt;h2 id=&quot;wire-it-with-your-domain&quot;&gt;Wire it with your domain&lt;/h2&gt;

&lt;p&gt;You just need to change domain’s A records to following ip addresses:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;192.30.252.153&lt;/li&gt;
  &lt;li&gt;192.30.252.154&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And create file &lt;a href=&quot;https://github.com/gevorg/gevorg.github.io/blob/master/CNAME&quot;&gt;&lt;strong&gt;CNAME&lt;/strong&gt;&lt;/a&gt; with your domain name inside.&lt;/p&gt;

&lt;h2 id=&quot;limitation&quot;&gt;Limitation&lt;/h2&gt;

&lt;p&gt;You can not install any Jekyll plugin on it, but some are &lt;a href=&quot;https://help.github.com/articles/configuring-jekyll-plugins/&quot;&gt;available&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;jekyll-mentions&lt;/li&gt;
  &lt;li&gt;jemoji&lt;/li&gt;
  &lt;li&gt;jekyll-redirect-from&lt;/li&gt;
  &lt;li&gt;jekyll-sitemap&lt;/li&gt;
  &lt;li&gt;jekyll-feed&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;related-links&quot;&gt;Related links&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://pages.github.com/&quot;&gt;Websites for you and your projects&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.github.com/articles/setting-up-an-apex-domain/#configuring-a-records-with-your-dns-provider&quot;&gt;Configuring A records with your DNS provider&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.github.com/articles/configuring-jekyll-plugins/&quot;&gt;Configuring Jekyll plugins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="github" /><category term="jekyll" /><summary>After using GitHub Pages for my websites I have some things to share with you.

There are many good things that I loved about it, starting from simple fact that it is completely free to use and
ending with more advanced feature like custom urls.

But also there are few things that I did not like about it and those are mostly cases when I met platform limitations.</summary></entry><entry><title>HTTP Authentication with Node.js</title><link href="http://gevorg.me/HTTP-Authentication-with-Node.js/" rel="alternate" type="text/html" title="HTTP Authentication with Node.js" /><published>2016-05-03T00:00:00+00:00</published><updated>2016-05-03T00:00:00+00:00</updated><id>http://gevorg.me/HTTP Authentication with Node.js</id><content type="html" xml:base="http://gevorg.me/HTTP-Authentication-with-Node.js/">&lt;p&gt;Everyone familiar with &lt;a href=&quot;https://httpd.apache.org/&quot;&gt;Apache HTTP Server&lt;/a&gt; knows the most popular way of setting up
HTTP Basic / Digest access authentication.&lt;/p&gt;

&lt;p&gt;Yes! I want to write about .htpasswd and .htdigest files and how can you use them in your Node.js application.
&lt;!--more--&gt;
In this article I will write about &lt;a href=&quot;http://http-auth.info/&quot;&gt;http-auth&lt;/a&gt; module that I created to support .htpasswd and
.htdigest files in Node.js applications.&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;
&lt;p&gt;The best way of installing it is via &lt;a href=&quot;https://www.npmjs.com/&quot;&gt;npm&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm install http-auth&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;
&lt;p&gt;Depending what type of authentication you want to use you should call corresponding method &lt;code class=&quot;highlighter-rouge&quot;&gt;auth.basic&lt;/code&gt; or
&lt;code class=&quot;highlighter-rouge&quot;&gt;auth.digest&lt;/code&gt;. You can view available configurations in &lt;a href=&quot;https://github.com/http-auth/http-auth#configurations&quot;&gt;configurations section&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Authentication module.
var auth = require(&#39;http-auth&#39;);
var basic = auth.basic({
    realm: &quot;Simon Area.&quot;,
    file: __dirname + &quot;/../data/users.htpasswd&quot;
});

// Creating new HTTP server.
http.createServer(basic, function(req, res) {
    res.end(&quot;Welcome to private area - &quot; + req.user + &quot;!&quot;);
}).listen(1337);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You might notice that application is calling &lt;a href=&quot;https://nodejs.org/api/http.html#http_http_createserver_requestlistener&quot;&gt;http.createServer&lt;/a&gt;
with mutated argument list, which is strange.&lt;/p&gt;

&lt;p&gt;Correct! Application is changing native node.js method to provide some flexibility in usage. You might
say that it is not future proof and &lt;strong&gt;one should never change what he / she does not own&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You are right, I just thought that there is very little possibility that the most used method in &lt;a href=&quot;https://nodejs.org&quot;&gt;Node.js&lt;/a&gt; will be changed.&lt;/p&gt;

&lt;h2 id=&quot;integrations&quot;&gt;Integrations&lt;/h2&gt;
&lt;p&gt;Module has integrations with some popular &lt;a href=&quot;https://nodejs.org&quot;&gt;Node.js&lt;/a&gt; modules and for sure the most important one is
&lt;a href=&quot;http://expressjs.com&quot;&gt;express.js&lt;/a&gt; integration.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Authentication module.
var auth = require(&#39;http-auth&#39;);
var basic = auth.basic({
    realm: &quot;Simon Area.&quot;,
    file: __dirname + &quot;/../data/users.htpasswd&quot;
});

// Application setup.
var app = express();
app.use(auth.connect(basic));

// Setup route.
app.get(&#39;/&#39;, function(req, res){
  res.send(&quot;Hello from express - &quot; + req.user + &quot;!&quot;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;command-line-tools&quot;&gt;Command line tools&lt;/h2&gt;
&lt;p&gt;As a bonus you can install &lt;a href=&quot;https://github.com/http-auth/htpasswd/&quot;&gt;htpasswd&lt;/a&gt; or &lt;a href=&quot;https://github.com/http-auth/htdigest/&quot;&gt;htdigest&lt;/a&gt;
command line tools using npm. Those should provide functionality similar to Apache’s tools.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm install -g htpasswd&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm install -g htdigest&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;related-links&quot;&gt;Related links&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://http-auth.info&quot;&gt;Node.js package for HTTP basic and digest access authentication.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/http-auth/http-auth&quot;&gt;GitHub repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="node.js" /><summary>Everyone familiar with Apache HTTP Server knows the most popular way of setting up
HTTP Basic / Digest access authentication.

Yes! I want to write about .htpasswd and .htdigest files and how can you use them in your Node.js application.</summary></entry></feed>
